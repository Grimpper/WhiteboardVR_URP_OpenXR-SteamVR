// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel NoInterpolation
#pragma kernel Interpolate

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> _BackgroundTex;
RWTexture2D<float4> _PreviousTex;
RWTexture2D<float4> _LiveTex;
RWTexture2D<float4> _ResultTex;

float _ResolutionInitTex;
float _ResolutionResult;
float _PenSize;
float _EraserSize;
float _Feather;
float4 _Color;

float2 _PixelUV;
float2 _LastPixelUV;

bool _Painting;
bool _EraseMode;

[numthreads(8,8,1)]
void NoInterpolation (uint3 id : SV_DispatchThreadID)
{
    float penThickness = _PenSize * 0.001;
    float eraserThickness = _EraserSize * 0.001 * 1.5;
    float featherDistance = _Feather * 0.0005;
    float2 uv = float2(id.xy / _ResolutionResult);

    float distUV = distance(float2(uv), float2(_PixelUV));
    
    if (_EraseMode)
    {
        float alpha = min( _PreviousTex[id.xy].a, lerp( 0.0, 1.0, smoothstep(eraserThickness - featherDistance, eraserThickness, distUV) ) );
        _PreviousTex[id.xy] = float4( _PreviousTex[id.xy].rgb, alpha );
    }
    else
    {
        float4 blendResult;
        float4 baseColor = _LiveTex[id.xy];
        
        blendResult.rgb = max( baseColor.rgb, lerp( _Color.rgb, baseColor.rgb, smoothstep(penThickness - featherDistance, penThickness, distUV) ) );
        blendResult.a = max( baseColor.a, lerp( _Color.a, 0.0, smoothstep(penThickness - featherDistance, penThickness, distUV) ) );
    
        _LiveTex[id.xy] = blendResult;
        _PreviousTex[id.xy] = max(_PreviousTex[id.xy], _LiveTex[id.xy]);
    }

    _ResultTex[id.xy] = lerp(_BackgroundTex[uv * _ResolutionInitTex], _PreviousTex[id.xy], _PreviousTex[id.xy].a);
}

float distanceToLine( float2 p, float2 a, float2 b )
{
    float2 pa = p-a, ba = b-a;
    float h = saturate( dot(pa,ba)/dot(ba,ba) );
    float2 d = pa - ba * h;
    return sqrt(dot(d,d));
}

[numthreads(8,8,1)]
void Interpolate (uint3 id : SV_DispatchThreadID)
{
    float penThickness = _PenSize * 0.001;
    float eraserThickness = _EraserSize * 0.001 * 1.5;
    float featherDistance = _Feather * 0.0005;
    float2 uv = float2(id.xy / _ResolutionResult);
    
    float distUV = _Painting ? distanceToLine(uv,_LastPixelUV,_PixelUV) : 1;
   
    if (_EraseMode)
    {
        float alpha = min( _PreviousTex[id.xy].a, lerp( 0.0, 1.0, smoothstep(eraserThickness - featherDistance, eraserThickness, distUV) ) );
        _PreviousTex[id.xy] = float4( _PreviousTex[id.xy].rgb, alpha );
        _LiveTex[id.xy] = _PreviousTex[id.xy];
    }
    else
    {
        float4 blendResult;
        float4 baseColor = _LiveTex[id.xy];
        
        blendResult.rgb = max( baseColor.rgb, lerp( _Color.rgb, baseColor.rgb, smoothstep(penThickness - featherDistance, penThickness, distUV) ) );
        blendResult.a = max( baseColor.a, lerp( _Color.a, 0.0, smoothstep(penThickness - featherDistance, penThickness, distUV) ) );
    
        _LiveTex[id.xy] = blendResult;
        _PreviousTex[id.xy] = max(_PreviousTex[id.xy], _LiveTex[id.xy]);
    }
    
    _ResultTex[id.xy] = lerp(_BackgroundTex[uv * _ResolutionInitTex], _PreviousTex[id.xy], _PreviousTex[id.xy].a);
}
